#  + - - - - - -
#  |  run with: snakemake final_rule --forceall --cores 4 --config ...
#  + - - - 

import os
import yaml

MODELS = ["Rich", "Muon", "GlobalMuonId", "GlobalPID"] 
PARTS = ["muon", "pion", "kaon", "proton"]

# +-------------------+
# |   Initial setup   |
# +-------------------+

configfile: "config/snakemake_config.yml"

with open("config/directories.yml") as file:
    config_dir = yaml.full_load(file)

data_dir = config_dir["data_dir"]
logs_dir = config_dir["logs_dir"]
models_dir = config_dir["models_dir"]

wildcard_constraints:
    model = "|".join([m for m in MODELS]),
    part = "|".join([p for p in PARTS]),

# +-----------------------------------+
# |   GAN models data preprocessing   |
# +-----------------------------------+

rule gan_preprocessing:
    params:
        data_fname = config["data_fname"],
        max_files = config["data_max_files"],
        chunk_size = config["prep_chunk_size"],

    output:
        data = os.path.join(data_dir, "pidgan-{model}-{part}-{sample}-data.npz"),
        tX = os.path.join(models_dir, "{model}_{part}_models/tX_{sample}.pkl"),
        tY = os.path.join(models_dir, "{model}_{part}_models/tY_{sample}.pkl"),

    log:
        os.path.join(logs_dir, "gan-preprocessing_{model}-{part}_{sample}.log")

    shell:
        "python prepare_dataset.py -m {wildcards.model} -p {wildcards.part} -F '{params.data_fname}' -M {params.max_files} -C {params.chunk_size} -D {wildcards.sample} > {log}"

# +--------------------------------------+
# |   isMuon models data preprocessing   |
# +--------------------------------------+

rule ann_preprocessing:
    params:
        data_fname = config["data_fname"],
        max_files = config["data_max_files"],
        chunk_size = config["prep_chunk_size"],

    output:
        data = os.path.join(data_dir, "pidgan-isMuon-{part}-{sample}-data.npz"),
        tX = os.path.join(models_dir, "isMuon_{part}_models/tX_{sample}.pkl"),

    log:
        os.path.join(logs_dir, "ann-preprocessing_isMuon-{part}_{sample}.log")

    shell:
        "python prepare_dataset.py -m isMuon -p {wildcards.part} -F '{params.data_fname}' -M {params.max_files} -C {params.chunk_size} -D {wildcards.sample} > {log}"

# +-------------------------+
# |   GAN models training   |
# +-------------------------+

rule gan_training:
    input:
        data = expand(
            os.path.join(data_dir, "pidgan-{model}-{part}-{sample}-data.npz"),
            model=MODELS,
            part=PARTS,
            sample=config["data_sample"],
        ),
        tX = expand(
            os.path.join(models_dir, "{model}_{part}_models/tX_{sample}.pkl"),
            model=MODELS,
            part=PARTS,
            sample=config["data_sample"],
        ),
        tY = expand(
            os.path.join(models_dir, "{model}_{part}_models/tY_{sample}.pkl"),
            model=MODELS,
            part=PARTS,
            sample=config["data_sample"],
        ),

    params:
        num_epochs = config["num_epochs"],
        chunk_size = config["gan_chunk_size"],
        train_ratio = config["gan_train_ratio"],

    output:
        directory(os.path.join(models_dir, "{model}_{part}_models/latest_{model}GAN-{part}_{sample}_model")),

    log:
        os.path.join(logs_dir, "gan-training_{model}-{part}_{sample}.log")

    shell:
        "python train_{wildcards.model}GAN.py -p {wildcards.part} -E {params.num_epochs} -C {params.chunk_size} -T {params.train_ratio} -D {wildcards.sample} --latest > {log}"

# +----------------------------+
# |   isMuon models training   |
# +----------------------------+

rule ann_training:
    input:
        data = expand(
            os.path.join(data_dir, "pidgan-isMuon-{part}-{sample}-data.npz"),
            model=MODELS,
            part=PARTS,
            sample=config["data_sample"],
        ),
        tX = expand(
            os.path.join(models_dir, "isMuon_{part}_models/tX_{sample}.pkl"),
            model=MODELS,
            part=PARTS,
            sample=config["data_sample"],
        ),
    
    params:
        num_epochs = config["num_epochs"],
        chunk_size = config["ismuon_chunk_size"],
        train_ratio = config["ismuon_train_ratio"],

    output:
        directory(os.path.join(models_dir, "isMuon_{part}_models/latest_isMuonANN-{part}_{sample}_model")),

    log:
        os.path.join(logs_dir, "ann-training_isMuon-{part}_{sample}.log")

    shell:
        "python train_isMuonANN.py -p {wildcards.part} -E {params.num_epochs} -C {params.chunk_size} -T {params.train_ratio} -D {wildcards.sample} --latest > {log}"

# +------------------+
# |    Final rule    |
# +------------------+

rule final_rule:
    input:
        gan_models = expand(
            os.path.join(models_dir, "{model}_{part}_models/latest_{model}GAN-{part}_{sample}_model"),
            model=MODELS,
            part=PARTS,
            sample=config["data_sample"],
        ),
        ann_model = expand(
            os.path.join(models_dir, "isMuon_{part}_models/latest_isMuonANN-{part}_{sample}_model"),
            part=PARTS,
            sample=config["data_sample"],
        ),

    params:
        logs_dir,

    output:
        ".all_rules_completed"

    shell:
        "rm {params}/*;"
        "touch {output}"
